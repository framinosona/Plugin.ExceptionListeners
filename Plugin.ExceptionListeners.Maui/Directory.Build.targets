<?xml version="1.0" encoding="utf-8"?>
<Project>
  <!-- Note : This is read AFTER the initial project file -->

  <!-- ==================== SELF REF ==================== -->
  <ItemGroup>
    <None Include="$([System.IO.Path]::Combine($(MSBuildThisFileDirectory), $(MSBuildThisFile)))" Pack="false" />
  </ItemGroup>

  <!-- ==================== DEFAULT CONFIGURATION ==================== -->
  <PropertyGroup>
    <Nullable>enable</Nullable>
    <LangVersion>latest</LangVersion>
    <ImplicitUsings>enable</ImplicitUsings>
    <DebugSymbols>true</DebugSymbols>
    <Deterministic>true</Deterministic>
  </PropertyGroup>

  <!-- ==================== LOGGING ==================== -->
  <Target Name="PrintBuildInfo" BeforeTargets="CoreCompile">
    <Message Importance="High" Text="Building : $(PackageId) - $(TargetFramework) - $(AssemblyFileVersion)" />
    <Message Importance="High" Text="ArtifactsPath        : $(ArtifactsPath)" />
    <Message Importance="High" Text="PackageOutputPath    : $(PackageOutputPath)" />
    <Message Importance="High" Text="IsHostMachineWindows : $(IsHostMachineWindows)" />
    <Message Importance="High" Text="IsHostMachineOSX     : $(IsHostMachineOSX)" />
    <Message Importance="High" Text="IsHostMachineLinux   : $(IsHostMachineLinux)" />
    <Message Importance="High" Text="IsHostMachineUnix    : $(IsHostMachineUnix)" />
  </Target>

  <!-- ==================== VERSION ==================== -->
  <PropertyGroup>
    <!-- Default version, when building locally -->
    <Version_Full Condition=" '$(Version_Full)' == '' ">1.0.0</Version_Full>
    <Version_Assembly Condition=" '$(Version_Assembly)' == '' ">$(Version_Full).0</Version_Assembly>

    <!-- Apply Version parts according to packaging standards -->
    <Version>$(Version_Full)</Version>
    <PackageVersion>$(Version_Full)</PackageVersion>

    <AssemblyInformationalVersion>$(Version_Full)</AssemblyInformationalVersion>
    <AssemblyVersion>$(Version_Assembly)</AssemblyVersion>
    <AssemblyFileVersion>$(Version_Assembly)</AssemblyFileVersion>

    <ApplicationDisplayVersion>$(Version_Full)</ApplicationDisplayVersion>
    <ApplicationVersion>$(Version_Revision)</ApplicationVersion>
  </PropertyGroup>

  <!-- ==================== GENERAL : VARIABLES ==================== -->
  <PropertyGroup>
    <OutputType>Library</OutputType>

    <!-- Project_Name -->
    <RootNamespace>$(Project_Name)</RootNamespace>
    <AssemblyName>$(Project_Name)</AssemblyName>
    <Title>$(Project_Name)</Title>

    <!-- Project_Copyright -->
    <Owners>$(Project_Copyright)</Owners>
    <Authors>$(Project_Copyright)</Authors>
    <Copyright>$(Project_Copyright)</Copyright>

    <!-- Project_Description -->
    <Summary>$(Project_Description)</Summary>
    <Description>$(Project_Description)</Description>
  </PropertyGroup>

  <!-- ==================== PACK : VARIABLES ==================== -->
  <PropertyGroup>
    <!-- this is set to true only in from within our build scripts -->
    <GeneratePackageOnBuild Condition="'$(GeneratePackageOnBuild)' == ''">false</GeneratePackageOnBuild>
    <PackOnBuild>$(GeneratePackageOnBuild)</PackOnBuild>

    <IncludeSource>True</IncludeSource>
    <IncludeSymbols>True</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>

    <!-- Project_Name -->
    <PackageId>$(Project_Name)</PackageId>

    <!-- Project_Description -->
    <PackageDescription>$(Project_Description)</PackageDescription>

    <!-- Project_Url -->
    <PackageProjectUrl>$(Project_Url)</PackageProjectUrl>

    <!-- Extra files and properties -->
    <PackageTags>$(Project_Tags)</PackageTags>
    <PackageOutputPath Condition="'$(PackageOutputPath)' == ''">$([System.IO.Path]::Combine($(MSBuildThisFileDirectory), `../output/packages`))</PackageOutputPath>
  </PropertyGroup>

  <!-- ==================== PACK : RESOURCES ==================== -->
  <PropertyGroup>
    <PackageIconPath>$([System.IO.Path]::Combine($(MSBuildThisFileDirectory), `../icon.png`))</PackageIconPath>
    <PackageLicencePath>$([System.IO.Path]::Combine($(MSBuildThisFileDirectory), `../LICENSE`))</PackageLicencePath>
    <PackageReadMePath>$([System.IO.Path]::Combine($(MSBuildThisFileDirectory), `../README.md`))</PackageReadMePath>

    <PackageIcon Condition="Exists('$(PackageIconPath)')">icon.png</PackageIcon>
    <PackageLicense Condition="Exists('$(PackageLicencePath)')">LICENSE</PackageLicense>
    <PackageReadmeFile Condition="Exists('$(PackageReadMePath)')">README.md</PackageReadmeFile>
  </PropertyGroup>
  <ItemGroup>
    <None Include="$(PackageIconPath)" Pack="true" PackagePath="\" Condition="Exists('$(PackageIconPath)')" />
    <None Include="$(PackageReadMePath)" Pack="true" PackagePath="\" Condition="Exists('$(PackageReadMePath)')" />
    <None Include="$(PackageLicencePath)" Pack="true" PackagePath="\" Condition="Exists('$(PackageLicencePath)')" />
  </ItemGroup>

  <!-- ==================== PACK : DOCUMENTATION ======================= -->
  <PropertyGroup>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <DocumentationFile>bin\$(Configuration)\$(TargetFramework)\$(Project_Name).xml</DocumentationFile>
  </PropertyGroup>

  <!-- ==================== PACK : SOURCELINK ==================== -->
  <PropertyGroup>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <!-- sourcelink: Include PDB in the built .nupkg -->
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb;.md</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" PrivateAssets="All" />
  </ItemGroup>

  <!-- ==================== PACK : .NET ANALYZERS ======================= -->
  <PropertyGroup>
    <EnableNETAnalyzers>true</EnableNETAnalyzers>
    <AnalysisMode>AllEnabledByDefault</AnalysisMode>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.NetAnalyzers">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <!-- ==================== PUBLIC API TRACKING : Later ====================
  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.PublicApiAnalyzers" Version="3.3.4">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <AdditionalFiles Include="PublicAPI.Shipped.txt" />
    <AdditionalFiles Include="PublicAPI.Unshipped.txt" />
  </ItemGroup> -->

  <!-- ==================== ARCHIVED FILES ======================= -->
  <ItemGroup>
    <Compile Remove="**/Archive/**/*.*" />
    <None Include="**/Archive/**/*.*" Pack="false" />
  </ItemGroup>

  <!-- ==================== DOCUMENTATION ======================= -->
  <ItemGroup>
    <Compile Remove="**/Documentation/**/*.*" />
    <None Include="**/Documentation/**/*.*" Pack="false" />
  </ItemGroup>

  <!-- ==================== MAUI INTEGRATION ==================== -->
  <PropertyGroup>
    <MauiTargetsFile Condition=" $(MauiTargetsFile) == ''">$([System.IO.Path]::Combine($(MSBuildThisFileDirectory), `Directory.Build.Maui.targets`))</MauiTargetsFile>
  </PropertyGroup>
  <Import Condition=" '$(UseMaui)' == 'true' AND Exists('$(MauiTargetsFile)')" Project="$(MauiTargetsFile)" />
</Project>
